// OpenAI API Text Analysis - Real Implementation
// This file provides a real implementation using OpenAI's API

// Import OpenAI API client
import OpenAI from 'openai';

/**
 * Initializes the OpenAI client with the provided API key
 * @param {string} apiKey - Your OpenAI API key
 * @returns {OpenAI} - Configured OpenAI client
 */
export const initializeOpenAI = (apiKey) => {
  return new OpenAI({
    apiKey: apiKey,
    dangerouslyAllowBrowser: true // Needed for client-side use
  });
};

/**
 * Validates an OpenAI API key by making a test request
 * @param {string} apiKey - The API key to validate
 * @returns {Promise<boolean>} - Whether the key is valid
 */
export const validateOpenAIKey = async (apiKey) => {
  if (!apiKey || !apiKey.startsWith('sk-')) {
    return false;
  }
  
  try {
    const openai = initializeOpenAI(apiKey);
    
    // Make a minimal API call to check if the key works
    const response = await openai.models.list();
    return response && Array.isArray(response.data);
  } catch (error) {
    console.error("API key validation error:", error);
    return false;
  }
};

/**
 * Analyzes text to determine if it's AI-generated using OpenAI's API
 * @param {string} text - The text to analyze
 * @param {string} apiKey - Your OpenAI API key
 * @returns {Promise<Object>} - Analysis results
 */
export const analyzeTextWithOpenAI = async (text, apiKey) => {
  if (!text || !apiKey) {
    throw new Error("Text and API key are required");
  }
  
  const openai = initializeOpenAI(apiKey);
  
  try {
    // Approach 1: Using embeddings comparison
    // This approach compares the text embedding with known AI/human text patterns
    const embeddingResponse = await openai.embeddings.create({
      model: "text-embedding-ada-002",
      input: text
    });
    
    const textEmbedding = embeddingResponse.data[0].embedding;
    
    // Approach 2: Using a completion with a specialized prompt
    // This is the more effective approach for detailed analysis
    const prompt = `
                    You are an AI text analysis expert specializing in assessing student transcripts to determine the originality of spoken content. Your task is to evaluate whether the student was speaking spontaneously or reading from an external source, which could include AI-generated material.

                    Analyze the following transcript:

                    "${text}"

                    Consider the following factors in your analysis:
                    1. Presence of natural speech patterns, such as filler words ("um," "uh"), hesitations, and informal phrasing.
                    2. Consistency and formality of tone throughout the transcript.
                    3. Variety in sentence structure versus repetitive patterns.
                    4. Use of personal pronouns and references to personal experiences.
                    5. Occurrence of human-like inconsistencies or errors.
                    6. Indicators of reading from a script, such as unnatural pacing or phrasing.
                    7. Contextual coherence and fluency of the speech.

                    Provide your assessment in the following **strict JSON format**:

                    {
                    "aiProbability": number,       // Likelihood (0-100) that the content was generated by AI.
                    "confidence": number,          // Confidence level (0-100) in your assessment.
                    "factors": string[],           // Key reasons influencing your assessment.
                    "likelySource": "human" | "ai",// Most probable source of the content.
                    "reasoning": string            // Summary explanation of your assessment.
                    }

                    Ensure that your response is accurate, concise, and unbiased, as it will be used in an educational context to uphold academic integrity.`;

    const completionResponse = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: "You are an AI detection expert that analyzes text to determine if it was written by an AI." },
        { role: "user", content: prompt }
      ],
      response_format: { type: "json_object" }
    });
    
    // Parse the response
    const analysisResult = JSON.parse(completionResponse.choices[0].message.content);
    
    // Calculate text statistics
    const words = text.split(' ').length;
    const sentences = Math.max(1, (text.match(/[.!?]+/g) || []).length);
    const personalPronouns = (text.match(/\b(I|me|my|mine|myself)\b/gi) || []).length;
    
    // Return combined results
    return {
      aiProbability: analysisResult.aiProbability,
      confidence: analysisResult.confidence,
      textStats: {
        words: words,
        sentences: sentences,
        avgWordsPerSentence: words / sentences,
        longWords: text.split(' ').filter(word => word.length > 6).length,
        personalPronouns: personalPronouns
      },
      interpretation: getInterpretation(analysisResult.aiProbability, words, analysisResult.likelySource),
      apiDetails: {
        model: "gpt-4o",
        confidenceFactors: analysisResult.factors || [],
        reasoning: analysisResult.reasoning || ""
      },
      sourceModel: 'openai',
      embedding: textEmbedding // Include for advanced comparisons
    };
  } catch (error) {
    console.error("OpenAI analysis error:", error);
    throw new Error(`Failed to analyze text: ${error.message}`);
  }
};

/**
 * Analyze multiple texts in sequence with rate limiting
 * @param {string[]} texts - Array of texts to analyze 
 * @param {string} apiKey - OpenAI API key
 * @returns {Promise<Object[]>} - Analysis results for each text
 */
export const analyzeBatchWithOpenAI = async (texts, apiKey) => {
  const results = [];
  
  // Process in sequence to avoid rate limits
  for (const text of texts) {
    if (text.trim()) {
      try {
        // Add a small delay between requests to avoid rate limits
        await new Promise(resolve => setTimeout(resolve, 200));
        
        const analysis = await analyzeTextWithOpenAI(text, apiKey);
        results.push({
          text: text,
          ...analysis
        });
      } catch (error) {
        // If one fails, add error but continue with others
        results.push({
          text: text,
          error: error.message,
          aiProbability: 50,
          confidence: 10,
          interpretation: "Analysis failed"
        });
      }
    }
  }
  
  return results;
};

/**
 * Generate a human-readable interpretation of the analysis results
 */
const getInterpretation = (aiScore, wordCount, likelySource) => {
  const lengthQualifier = wordCount < 15 ? 
    "This sample is very short, which typically affects certainty, but OpenAI's analysis suggests: " : 
    "Based on OpenAI's analysis: ";
  
  if (aiScore < 30) {
    return `${lengthQualifier}This text is likely human-written with natural speech patterns.`;
  } else if (aiScore < 60) {
    return `${lengthQualifier}This text has mixed indicators that could suggest either human or AI authorship.`;
  } else {
    return `${lengthQualifier}This text shows patterns consistent with AI-generated content.`;
  }
};